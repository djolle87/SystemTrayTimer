/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package systemtraytimer;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Hashtable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JColorChooser;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import static systemtraytimer.SystemTrayTimer.mainWindow;

/**
 *
 * @author Djole
 */
public class SettingsWindow extends javax.swing.JFrame {

    public Color c;
    //public int speed;
    public static int i;
    private static Timer t;
    private static Timer timer;
    private static SwingWorker sw1;
    private static SwingWorker sw2;
    private static boolean sw1Started = false;
    private static boolean sw2Started = false;
    private static Thread thread;

    /**
     * Creates new form SettingsWindow
     */
    public SettingsWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jSpinner2 = new javax.swing.JSpinner();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();

        setName("Settings"); // NOI18N

        jButton1.setText("Chose color");
        jButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Color code: not chosen");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jSlider1.setMinimum(100);
        jSlider1.setMaximum(3300);
        jSlider1.setValue(800);
        jSlider1.setMajorTickSpacing(1000);
        jSlider1.setMajorTickSpacing(800);
        jSlider1.setPaintTicks(true);
        Hashtable<Integer,JLabel> labels = new Hashtable<Integer, JLabel>();
        labels.put(100, new JLabel("Fast"));
        labels.put(1700, new JLabel("Medium"));
        labels.put(3300, new JLabel("Slow"));
        jSlider1.setLabelTable(labels);
        jSlider1.setPaintLabels(true);

        jSlider1.addChangeListener(new ChangeListener(){
            public void stateChanged(ChangeEvent e){
                //speed = ((JSlider)e.getSource()).getValue();
            }
        });

        jButton2.setText("Start");
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Stop");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jSpinner2.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        buttonGroup1.add(jCheckBox1);
        jCheckBox1.setText("on time:");

        buttonGroup1.add(jCheckBox2);
        jCheckBox2.setText("countdown minutes:");

        jLabel2.setText("Set speed:");

        jSpinner1.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.SECOND));
        jSpinner1.setEditor(new javax.swing.JSpinner.DateEditor(jSpinner1, "HH:mm:ss"));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(160, 160, 160))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButton1)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(93, 93, 93)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jCheckBox1)
                                .addComponent(jCheckBox2))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jSpinner2)
                                .addComponent(jSpinner1)))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(27, 27, 27))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox2))
                .addGap(23, 23, 23)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addComponent(jLabel2)
                .addGap(10, 10, 10)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // creating color chooser dialog 
        JColorChooser jcc = new JColorChooser();
        JDialog dialog = JColorChooser.createDialog(null, "Choose color", true, jcc, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                c = jcc.getColor();
            }
        }, null);
        dialog.setVisible(true);
        jLabel1.setText("Color code: " + (Integer.toHexString(jcc.getColor().getRGB() & 0x00fffff)).toUpperCase());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // closing active timers and threads
        if (t != null && t.isRunning()) {
            t.stop();
            //System.out.println("t stoped: " + !t.isRunning());
        }
        if (timer != null && timer.isRunning()) {
            timer.stop();
            //System.out.println("Timer stoped: " + !timer.isRunning());
        }
        //try {
        if (sw1 != null && !sw1.isCancelled()) {
            if (thread.isAlive()) {
                thread.interrupt();
                System.out.println("Thread stoped: " + thread.isAlive());
            }
            //sw1.cancel(true);
            //System.out.println("SwingWorker1 stoped: " + sw1.isCancelled());
        }
        if (sw2 != null && !sw2.isCancelled()) {
            sw2.cancel(true);
            //System.out.println("SwingWorker2 stoped: " + sw2.isCancelled());
        }
        //} catch (Exception e) {
        //}
        mainWindow.setVisible(false);
        jButton1.setEnabled(true);
        jButton2.setEnabled(true);
        jCheckBox1.setEnabled(true);
        jCheckBox2.setEnabled(true);
        jSlider1.setEnabled(true);
        jSpinner1.setEnabled(true);
        jSpinner2.setEnabled(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // disable all controls except stop button    

        if (!jCheckBox1.isSelected() && !jCheckBox2.isSelected()) {
            JOptionPane.showMessageDialog(null, "You must first select the checkbox!");
        } else if (jCheckBox1.isSelected() || jCheckBox2.isSelected()) {

            this.setVisible(false);
            jButton1.setEnabled(false);
            jButton2.setEnabled(false);
            jCheckBox1.setEnabled(false);
            jCheckBox2.setEnabled(false);
            jSlider1.setEnabled(false);
            jSpinner1.setEnabled(false);
            jSpinner2.setEnabled(false);

            // different countdowns
            if (jCheckBox2.isSelected()) {
                sw1 = new SwingWorker() {

                    @Override
                    protected Object doInBackground() throws Exception {
                        thread = new Thread();
                        thread.sleep(60000 * Integer.parseInt(jSpinner2.getValue().toString()));
                        return null;
                    }

                    @Override
                    protected void done() {
                        showtime();
                    }
                };
                sw1.execute();
            } else if (jCheckBox1.isSelected()) {
                sw2 = new SwingWorker() {
                    @Override
                    protected Object doInBackground() throws Exception {
                        final DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
                        timer = new Timer(1000, new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent e) {
                                Calendar now = Calendar.getInstance();
                                if (dateFormat.format(now.getTime()).equals(dateFormat.format(jSpinner1.getValue()))) {
                                    showtime();
                                }
                            }
                        });
                        timer.start();
                        return null;
                    }

//                @Override
//                protected void done() {
//                    showtime();
//                }
                };
                sw2.execute();
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    public void showtime() {
        // start show
        mainWindow.setVisible(true);
        mainWindow.getContentPane().setBackground(new Color(255, 255, 255));
        i = 0;
        t = new Timer(jSlider1.getValue(), new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                i++;
                if (i % 2 == 0) {
                    mainWindow.getContentPane().setBackground(new Color(255, 255, 255));
                } else {
                    mainWindow.getContentPane().setBackground(c);
                }
            }

        });
        t.start();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SettingsWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SettingsWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SettingsWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SettingsWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SettingsWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    public javax.swing.JSlider jSlider1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    // End of variables declaration//GEN-END:variables
}
